{"version":3,"sources":["Components/QuizArea.jsx","Utils/questions.utils.js","Components/StartScreen.jsx","Components/ScoreBoard.jsx","App.jsx","index.js"],"names":["QuizArea","handleOptionClickedTrue","handleOptionClickedFalse","questionIndex","quizzes","cQuestion","correct_answer","html","txt","document","createElement","innerHTML","value","decodeHtml","question","className","onClick","fetchQuestions","numOfQuestions","difficulty","categoryId","a","params","URLSearchParams","append","axios","get","response","data","results","length","Error","difficultyLevels","StartScreen","startGame","setNumOfQuestions","gameStarted","setGameStarted","categories","setCategories","setCategoryId","setDifficulty","error","fetchCategories","useCallback","trivia_categories","console","log","useEffect","id","type","min","max","placeholder","onChange","event","target","alert","map","category","name","e","level","ScoreBoard","numCorrect","toFixed","App","useState","setQuizzes","gameFinished","setGameFinished","currentQuestionIndex","setCurrentQuestionIndex","setNumCorrect","setError","currentQuestion","questions","message","prevState","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.43f3dbcc.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction decodeHtml(html) {\n  var txt = document.createElement(\"textarea\");\n  txt.innerHTML = html;\n  return txt.value;\n}\n\nfunction QuizArea({\n  handleOptionClickedTrue,\n  handleOptionClickedFalse,\n  questionIndex,\n  quizzes,\n  correct_answer,\n}) {\n  const currentQuestion = quizzes[questionIndex];\n  const cQuestion = decodeHtml(currentQuestion.question);\n\n  return (\n    <section className=\"bg-four rounded-xl h-32  w-screen shadow-xl\">\n      <div className=\"text-center\">\n        <h1>Question #{questionIndex + 1}</h1>\n\n        <h1>{cQuestion}</h1>\n      </div>\n\n      <div className=\"wrapper-button my-6 \">\n        <button\n          className=\"border rounded mr-12 bg-five hover:bg-four\"\n          onClick={handleOptionClickedTrue}\n        >\n          True\n        </button>\n        <button\n          className=\"border bg-five rounded hover:bg-four\"\n          onClick={handleOptionClickedFalse}\n        >\n          False\n        </button>\n      </div>\n    </section>\n  );\n}\n\nexport default QuizArea;\n","import axios from \"axios\";\n\nexport const fetchQuestions = async (\n  numOfQuestions,\n  difficulty,\n  categoryId\n) => {\n  const params = new URLSearchParams();\n  params.append(\"amount\", numOfQuestions);\n  if (difficulty !== \"all\") {\n    params.append(\"difficulty\", difficulty);\n  }\n  if (categoryId !== -1) {\n    params.append(\"categoryId\", categoryId);\n  }\n  params.append(\"type\", \"boolean\");\n  const url = \"https://opentdb.com/api.php\";\n  const response = await axios.get(url, { params });\n  const data = response.data.results;\n  if (!data.length) {\n    throw new Error(\"No question available.\");\n  }\n  return data;\n};\n","import React, { useCallback, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { fetchQuestions } from \"../Utils/questions.utils\";\n\nconst difficultyLevels = [\"easy\", \"medium\", \"hard\", \"all\"];\n\nconst StartScreen = ({\n  startGame,\n  gameStarted,\n  setGameStarted,\n  setNumOfQuestions,\n  quizzes,\n  categories,\n  setCategories,\n  setCategoryId,\n  setDifficulty,\n  error,\n}) => {\n  const handleDifficultyLevelChange = (e) => {\n    setDifficulty(e.target.value);\n  };\n\n  const handleNumOfQuestionInputChange = (event) => {\n    if (event.target.value > 50) {\n      alert(\"Please enter a maximum value of 50 or less!\");\n    } else {\n      setNumOfQuestions(event.target.value);\n    }\n  };\n\n  const handleCategoryChange = (event) => {\n    setCategoryId(event.target.value);\n  };\n\n  const fetchCategories = useCallback(async () => {\n    try {\n      const url = \"https://opentdb.com/api_category.php\";\n      const response = await axios.get(url);\n      setCategories(response.data.trivia_categories);\n    } catch (error) {\n      console.log({ error });\n    }\n  }, []);\n\n  const fetchDifficulties = async () => {\n    try {\n      const url = \"https://opentdb.com/api.php\";\n      const response = await axios.get(url);\n      setDifficulty(response.data.trivia_difficulty);\n    } catch (error) {\n      console.log({ error });\n    }\n  };\n\n  useEffect(() => {\n    fetchCategories();\n  }, []);\n\n  return (\n    <section className=\"\">\n      <div className=\"wrapper bg-four rounded-lg shadow-xl p-6\">\n        <div className=\"title \">\n          <h1 className=\"text-4xl text-primary rounded bg-three shadow-md text-center font-semibold tracking-wide\">\n            QUIZ GAME\n          </h1>\n        </div>\n        <div>\n          <h2 className=\"my-1.5 font-semibold\">Enter number of questions</h2>\n          <input\n            id=\"set-quiz-length\"\n            type=\"number\"\n            min={1}\n            max={50}\n            placeholder=\"Number of Questions\"\n            onChange={handleNumOfQuestionInputChange}\n          />\n        </div>\n        <div>\n          <h2 className=\"my-1.5 font-semibold\">Category</h2>\n          <select onChange={handleCategoryChange}>\n            {categories.map((category) => {\n              return (\n                <option key={category.id} value={category.id}>\n                  {category.name}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n        <div>\n          <h2 className=\"my-1.5 font-semibold\">Difficulty</h2>\n          <select onChange={handleDifficultyLevelChange}>\n            {difficultyLevels.map((level) => {\n              return (\n                <option key={level} value={level}>\n                  {level}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n        {error && <div>{error}</div>}\n        <div>\n          <br />\n          <button\n            className=\"z-50 hover:bg-transparent text-gray-700 font-bold py-2 px-4 border-b-4 border-five hover:border-blue rounded\"\n            onClick={startGame}\n          >\n            Start Quiz\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default StartScreen;\n","import React from \"react\";\n\nfunction ScoreBoard({ numOfQuestions, numCorrect }) {\n  return (\n    <div className=\"wrapper bg-four rounded-lg shadow-xl space-y-6\">\n      <h1>Your Results: </h1>\n      <h2>Number of Questions Correct: {numCorrect}</h2>\n      <h2>Number of Questions Incorrect: {numOfQuestions - numCorrect}</h2>\n      <h2>\n        Your Score percentage:{\" \"}\n        {((numCorrect / numOfQuestions) * 100).toFixed(2)}%\n      </h2>\n      <h1 className=\"\">Well Done!</h1>\n    </div>\n  );\n}\n\nexport default ScoreBoard;\n","import React, { useState } from \"react\";\nimport QuizArea from \"./Components/QuizArea\";\nimport StartScreen from \"./Components/StartScreen\";\nimport { fetchQuestions } from \"./Utils/questions.utils\";\nimport ScoreBoard from \"./Components/ScoreBoard\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [numOfQuestions, setNumOfQuestions] = useState(0);\n  const [quizzes, setQuizzes] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [categoryId, setCategoryId] = useState(-1);\n  const [difficulty, setDifficulty] = useState(\"all\");\n\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameFinished, setGameFinished] = useState(false);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n  const [numCorrect, setNumCorrect] = useState(0);\n  const [error, setError] = useState(null);\n\n  const currentQuestion = quizzes[currentQuestionIndex];\n\n  const startGame = async () => {\n    try {\n      setError(null);\n      const questions = await fetchQuestions(\n        numOfQuestions,\n        difficulty,\n        categoryId\n      );\n      setQuizzes(questions);\n      setGameStarted(true);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const handleOptionClickedTrue = () => {\n    if (currentQuestion.correct_answer === \"True\") {\n      setNumCorrect((prevState) => {\n        return prevState + 1;\n      });\n      setCurrentQuestionIndex((prevState) => {\n        return prevState + 1;\n      });\n    } else {\n      setCurrentQuestionIndex((prevState) => {\n        return prevState + 1;\n      });\n    }\n\n    if (currentQuestionIndex === numOfQuestions - 1) {\n      setGameFinished(true);\n    }\n  };\n\n  const handleOptionClickedFalse = () => {\n    if (currentQuestion.correct_answer === \"False\") {\n      setNumCorrect((prevState) => {\n        return prevState + 1;\n      });\n      setCurrentQuestionIndex((prevState) => {\n        return prevState + 1;\n      });\n    } else {\n      setCurrentQuestionIndex((prevState) => {\n        return prevState + 1;\n      });\n    }\n\n    if (currentQuestionIndex === numOfQuestions - 1) {\n      setGameFinished(true);\n    }\n  };\n\n  return (\n    <div>\n      {gameStarted === false && (\n        <StartScreen\n          startGame={startGame}\n          numOfQuestions={numOfQuestions}\n          setNumOfQuestions={setNumOfQuestions}\n          quizzes={quizzes}\n          setQuizzes={setQuizzes}\n          categories={categories}\n          setCategories={setCategories}\n          categoryId={categoryId}\n          setCategoryId={setCategoryId}\n          difficulty={difficulty}\n          setDifficulty={setDifficulty}\n          error={error}\n        />\n      )}\n      {gameStarted === true && gameFinished === false && !error && (\n        <QuizArea\n          questionIndex={currentQuestionIndex}\n          startGame={startGame}\n          numOfQuestions={numOfQuestions}\n          setNumOfQuestions={setNumOfQuestions}\n          quizzes={quizzes}\n          setQuizzes={setQuizzes}\n          categories={categories}\n          setCategories={setCategories}\n          categoryId={categoryId}\n          setCategoryId={setCategoryId}\n          difficulty={difficulty}\n          setDifficulty={setDifficulty}\n          handleOptionClickedTrue={handleOptionClickedTrue}\n          handleOptionClickedFalse={handleOptionClickedFalse}\n        />\n      )}\n      {gameFinished === true && (\n        <ScoreBoard numCorrect={numCorrect} numOfQuestions={numOfQuestions} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"tailwindcss/tailwind.css\";\nimport App from \"./App\";\nimport \"./App.css\";\n\nReactDOM.render(<App />, document.getElementById(\"quiz-root\"));\n"],"sourceRoot":""}